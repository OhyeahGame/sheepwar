cn.ohyeah.stb.game.DebugModule -> a:
    int __DEBUG_MODE_CMD_POS -> a
    int __ENGINEERING_MODE_CMD_POS -> b
    long __DEBUG_TIME_MILLIS -> c
    boolean __DEBUG_MODE -> d
    boolean __ENGINEERING_MODE -> e
    java.lang.String __DEBUG_MSG -> f
    java.lang.String __DEBUG_USER_MSG -> g
    int __DEBUG_MAX_TIME -> h
    int __DEBUG_MAX_MEM -> i
    int __KEY_CODE -> j
    cn.ohyeah.stb.game.IEngine engine -> k
    void checkDebugCmd(int,char) -> a
    void showDebugInfo(cn.ohyeah.stb.game.SGraphics) -> a
    boolean isDebugMode() -> a
    int turnBright(int,int,int) -> a
    boolean checkSquareCollision(int,int,int,int,int,int,int,int) -> a
cn.ohyeah.stb.game.GameCanvasEngine -> b:
    boolean __RELEASE -> f
    int state -> g
    javax.microedition.midlet.MIDlet midlet -> h
    cn.ohyeah.stb.key.KeyState keyState -> a
    cn.ohyeah.stb.game.SGraphics g -> b
    int screenWidth -> a_
    int screenHeight -> b_
    int loopCircle -> i
    boolean exit -> c_
    int smallFontSize -> j
    int mediumFontSize -> k
    int largeFontSize -> l
    cn.ohyeah.stb.game.DebugModule debugModule -> m
    long recordMillis -> n
    boolean isDebugMode() -> a
    void setRelease(boolean) -> a
    void setFont(int) -> a
    void setDefaultFont() -> b
    int getScreenWidth() -> c
    int getScreenHeight() -> d
    void flushGraphics() -> flushGraphics
    cn.ohyeah.stb.game.SGraphics getSGraphics() -> e
    cn.ohyeah.stb.key.KeyState getKeyState() -> f
    void keyPressed(int) -> keyPressed
    void keyReleased(int) -> keyReleased
    void run() -> run
    void loop() -> g
    void trySleep(int) -> b
cn.ohyeah.stb.game.IEngine -> c:
    int getScreenWidth() -> c
    int getScreenHeight() -> d
cn.ohyeah.stb.game.SGraphics -> d:
    javax.microedition.lcdui.Graphics g -> a
    int offsetX -> b
    int offsetY -> c
    void drawImage(javax.microedition.lcdui.Image,int,int,int) -> a
    void drawRegion(javax.microedition.lcdui.Image,int,int,int,int,int,int,int,int) -> a
    void drawString(java.lang.String,int,int,int) -> a
    void fillRect(int,int,int,int) -> a
    int getColor() -> a
    javax.microedition.lcdui.Font getFont() -> b
    void setClip(int,int,int,int) -> b
    void setColor(int) -> a
    void setFont(javax.microedition.lcdui.Font) -> a
cn.ohyeah.stb.key.KeyState -> e:
    int keyStates -> a
    int currKeyCode -> b
    char ch -> c
    boolean supportKeyReleased -> d
    boolean isDoubleClick -> e
    boolean hasPersistMoveEvent -> f
    char getKeyChar() -> a
    void set(int) -> g
    void remove(int) -> a
    boolean contains(int) -> b
    boolean containsAndRemove(int) -> c
    boolean containsMoveEventAndRemove(int) -> d
    void resetMoveEvent() -> b
    void keyPressed(int) -> e
    void keyReleased(int) -> f
cn.ohyeah.stb.res.ResourceManager -> f:
    java.lang.String[] uri -> a
    java.lang.Object[] res -> b
    cn.ohyeah.stb.res.ResourceManager createImageResourceManager(java.lang.String[]) -> a
    javax.microedition.lcdui.Image loadImage(java.lang.String) -> a
    javax.microedition.lcdui.Image loadImage(int) -> a
cn.ohyeah.stb.res.UIResource -> g:
    java.lang.String[] STR_CONFIRM_BTN_TEXT -> a
    java.lang.String[] imagePaths -> b
    cn.ohyeah.stb.game.IEngine engine -> c
    cn.ohyeah.stb.ui.PopupText defaultPt -> d
    cn.ohyeah.stb.ui.PopupConfirm defaultPc -> e
    cn.ohyeah.stb.res.ResourceManager resource -> f
    void registerEngine(cn.ohyeah.stb.game.IEngine) -> a
cn.ohyeah.stb.ui.PopupConfirm -> h:
cn.ohyeah.stb.ui.PopupText -> i:
cn.ohyeah.stb.ui.TextView -> j:
    int currentColor -> a
    int destColor -> b
    cn.ohyeah.stb.ui.TextView textView -> c
    void showMultiLineText(cn.ohyeah.stb.game.SGraphics,java.lang.String,int,int,int,int,int) -> a
cn.ohyeah.stb.util.RandomValue -> k:
    java.util.Random random -> a
    int getRandInt(int) -> a
    int getRandInt(int,int) -> a
sheepwar.Batches -> sheepwar.a:
    java.util.Vector npcs -> a
    sheepwar.Role redWolf -> b
    int[] coors -> s
    int[] coorY -> t
    long startTime -> u
    long endTime -> v
    int[] bublePara -> w
    int[] npcPara -> x
    void createBatches(int,int,int) -> a
    void createBatchesReward(int,int,int) -> b
    void setWolfInfo(int,int,sheepwar.Role,int,int) -> a
    sheepwar.Role createRedWolf() -> a
    void createBallon(sheepwar.Role) -> a
    void showWolf(cn.ohyeah.stb.game.SGraphics,sheepwar.Weapon) -> a
    void setWolfLadders(sheepwar.Role) -> b
    void showRedWolf(cn.ohyeah.stb.game.SGraphics,sheepwar.Weapon) -> b
    void clearObject() -> b
sheepwar.Common -> sheepwar.b:
    int ScrW -> c
    int ScrH -> d
    short blue -> e
    short green -> f
    short multicolour -> g
    short red -> h
    short yellow -> i
    short orange -> j
    short apple -> k
    short lemon -> l
    short pear -> m
    short watermelon -> n
    short[] selectFruit -> o
    short[][] regular -> p
    int[][][] BatchesInfo -> q
    int[][][] RewardLevelBatchesInfo -> r
sheepwar.CreateRole -> sheepwar.c:
    int flag -> b
    int index -> s
    int handFlag -> t
    int handIndex -> u
    int[] para -> a
    sheepwar.Role createSheep() -> a
    void showSheep(cn.ohyeah.stb.game.SGraphics,sheepwar.Role) -> a
sheepwar.Prop -> sheepwar.d:
sheepwar.PropManager -> sheepwar.e:
    sheepwar.SheepWarGameEngine engine -> b
    int[] propIds -> a
sheepwar.Resource -> sheepwar.f:
    short NUMS -> bm
    short id_main_bg -> a
    short id_main_menu -> b
    short id_playing_menu -> s
    short id_playing_cloudbig -> t
    short id_playing_cloudsmall -> u
    short id_playing_lawn -> v
    short id_playing_step -> w
    short id_playing_tree -> x
    short id_playing_stop -> y
    short id_game_bg -> z
    short id_playing_prop_memu -> A
    short id_playing_prop -> B
    short id_playing_lunzi -> C
    short id_playing_shenzi -> D
    short id_playing_lift -> E
    short id_playing_shenzi1 -> F
    short id_playing_sheep -> G
    short id_sheep_eye -> H
    short id_sheep_hand -> I
    short id_bomb -> J
    short id_wolf_run -> K
    short id_wolf_down -> L
    short id_wolf_climb -> M
    short id_balloon_blue -> N
    short id_balloon_green -> O
    short id_balloon_multicolour -> P
    short id_balloon_red -> Q
    short id_balloon_yellow -> R
    short id_balloon_yellowred -> S
    short id_ladder -> T
    short id_shop_balance -> U
    short id_shop_big -> V
    short id_shop_figure -> W
    short id_shop_go_pay -> X
    short id_shop_midding -> Y
    short id_shop_out_base -> Z
    short id_shop_out -> aa
    short id_shop_small_base -> ab
    short id_shop_small -> ac
    short id_price_quantity -> ad
    short id_shop -> ae
    short id_achievement -> af
    short id_achievement_left_right -> ag
    short id_achievement_left_right1 -> ah
    short id_achievement_long -> ai
    short id_achievement_long1 -> aj
    short id_achievement_out1 -> ak
    short id_achievement_points -> al
    short id_archivement_hoof -> am
    short id_archivement_hoof1 -> an
    short id_achievement_word -> ao
    short id_achievement_left -> ap
    short id_slash -> aq
    short id_current_ranking -> ar
    short id_ranking_option -> as
    short id_ranking_option1 -> at
    short id_ranking_stripe -> au
    short id_ranking -> av
    short id_ranking_show -> aw
    short id_ranking_word -> ax
    short id_playing_level -> ay
    short id_playing_point -> az
    short id_sheep_head -> aA
    short id_wolf_head -> aB
    short id_multiply -> aC
    short id_game_help -> aD
    short id_logo -> aE
    short id_pass_bg -> aF
    short id_pass_cloud -> aG
    short id_pass_cloud1 -> aH
    short id_pass_cloud2 -> aI
    short id_pass_num -> aJ
    short id_pass_rainbow -> aK
    short id_pass_score -> aL
    short id_pass_star -> aM
    short id_pass_star2 -> aN
    short id_net -> aO
    short id_net2 -> aP
    short id_boom -> aQ
    short id_boom1 -> aR
    short id_prop_3 -> aS
    short id_prop_4 -> aT
    short id_prop_4_effect -> aU
    short id_prop_5_effect -> aV
    short id_prop_7_effect -> aW
    short id_cloud1 -> aX
    short id_apple -> aY
    short id_lemon -> aZ
    short id_orange -> ba
    short id_watermelon -> bb
    short id_red_wolf -> bc
    short id_game_result -> bd
    short id_game_return -> be
    short id_sub_menu_bg -> bf
    short id_sub_menu -> bg
    short id_prop_fist -> bh
    short id_prop_fist_effect -> bi
    short id_pumpkin -> bj
    java.lang.String[] imagesrcs -> bn
    javax.microedition.lcdui.Image[] images -> bo
    java.lang.String[] gameInfo -> bk
    java.lang.String[][] propIntroduce -> bl
    javax.microedition.lcdui.Image loadImage(int) -> a
    void freeImage(int) -> b
sheepwar.Role -> sheepwar.g:
    int id -> a
    int mapx -> b
    int mapy -> c
    int frame -> d
    int direction -> e
    int status -> f
    int status2 -> g
    int position -> h
    int position2 -> i
    int lifeNum -> j
    int speed -> k
    int scores -> l
    int scores2 -> m
    int coorX -> n
    int coorY -> o
    int height -> p
    int width -> q
    int hitNum -> r
    int hitTotalNum -> s
    int hitBuble -> t
    int useProps -> u
    int hitFruits -> v
    int bombNum -> w
    int hitRatio -> x
    int hitBooms -> y
    int colorId -> z
    sheepwar.Role role -> A
sheepwar.SheepWarGameEngine -> sheepwar.h:
    int ScrW -> s
    int ScrH -> t
    sheepwar.SheepWarGameEngine instance -> u
    sheepwar.StateMain stateMain -> y
    sheepwar.StateGame stateGame -> z
    sheepwar.PropManager pm -> v
    sheepwar.Prop[] props -> w
    int state -> x
    long recordTime -> A
    void loop() -> g
    boolean timePass(int) -> b
sheepwar.SheepWarMIDlet -> sheepwar.SheepWarMIDlet:
    sheepwar.SheepWarMIDlet instance -> a
    sheepwar.SheepWarMIDlet getInstance() -> a
    void destroyApp(boolean) -> destroyApp
    void pauseApp() -> pauseApp
    void startApp() -> startApp
sheepwar.StateAttainment -> sheepwar.i:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int archY -> s
    int rightY -> t
    int bX -> u
    boolean isRight -> v
    boolean isBotton -> w
    void processAttainment() -> a
    void clear() -> b
    void drawNum(cn.ohyeah.stb.game.SGraphics,int,int,int) -> a
sheepwar.StateGame -> sheepwar.j:
    boolean HASWOLF_ONE -> a
    boolean HASWOLF_TWO -> b
    boolean HASWOLF_THREE -> s
    boolean HASWOLF_FOUR -> t
    boolean IS_FOUR_WOLF -> u
    boolean isGameOver -> K
    boolean isSuccess -> L
    sheepwar.SheepWarGameEngine engine -> M
    sheepwar.CreateRole createRole -> v
    sheepwar.Batches batches -> w
    sheepwar.Weapon weapon -> x
    sheepwar.Role own -> y
    short level -> N
    short rewardLevel -> O
    boolean isRewardLevel -> P
    boolean isReward -> Q
    short batch -> R
    int[][] LEVEL_INFO -> S
    int[][] REWARD_LEVEL_INFO -> T
    long gameBufferTimeS -> U
    long gameBufferTimeE -> V
    boolean isNextLevel -> W
    long startTime -> X
    long endTime -> Y
    boolean isAttack -> Z
    int bulletInterval -> aa
    boolean pasueState -> z
    long pasueTimeS -> ab
    long pasueTimeE -> ac
    int pasueInterval -> ad
    boolean speedFlag -> ae
    long addSpeedTime -> af
    long addSpeedTime2 -> ag
    int speedLiquidInterval -> ah
    long proEndTime -> ai
    long proStartTime -> aj
    long protectInterval -> ak
    boolean protectState -> A
    long magnetStartTime -> al
    long magnetEndTime -> am
    long magnetInterval -> an
    boolean magnetState -> B
    boolean isUseGlove -> ao
    boolean isShowGlove -> ap
    boolean golveFlag -> aq
    long gloveEndTime -> ar
    long gloveStartTime -> as
    int gloveInterval -> at
    int lifeNum -> C
    int scores -> D
    int hitNum -> E
    int hitTotalNum -> F
    int hitBuble -> G
    int useProps -> H
    int hitFruits -> I
    int hitRatio -> J
    int tempx -> au
    int tempy -> av
    int tempx2 -> aw
    int tempy2 -> ax
    int sWidth -> ay
    int sTempy -> az
    int cloudIndex -> aA
    int cloud2Index -> aB
    int down_cloudIndex -> aC
    int down_cloud2Index -> aD
    int x1 -> aE
    int x2 -> aF
    int x3 -> aG
    void handleKey(cn.ohyeah.stb.key.KeyState) -> a
    void updateProp$13462e() -> b
    void show(cn.ohyeah.stb.game.SGraphics) -> a
    void execute() -> a
    void print() -> c
    void moveRole(int) -> a
    void drawNum(cn.ohyeah.stb.game.SGraphics,int,int,int) -> a
    void drawProp(cn.ohyeah.stb.game.SGraphics,int,int,int) -> b
    void hitFruit(sheepwar.Weapon) -> a
    void hitWolf(sheepwar.Role) -> a
    void clear() -> d
sheepwar.StateGameSuccessOrFail -> sheepwar.k:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int cloudIndex -> s
    int cloud2Index -> t
    int down_cloudIndex -> u
    int down_cloud2Index -> v
    int x1 -> w
    int x2 -> x
    int x3 -> y
    int ballonY -> z
    int ballon2Y -> A
    int ballon3Y -> B
    int ballon4Y -> C
    int ballon5Y -> D
    void processGameSuccessOrFail(boolean,sheepwar.Role) -> a
    void clear() -> a
sheepwar.StateHelp -> sheepwar.l:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int helpX -> s
    int pageIndex -> t
    void processHelp() -> a
    void drawNum(cn.ohyeah.stb.game.SGraphics,int,int,int) -> a
    void clear() -> b
sheepwar.StateMain -> sheepwar.m:
    boolean exit -> a
    sheepwar.StateGame stateGame -> b
    sheepwar.SheepWarGameEngine engine -> s
    int[][] menuAxis -> t
    int mainIndex -> u
    void handleKey(cn.ohyeah.stb.key.KeyState) -> a
    void show(cn.ohyeah.stb.game.SGraphics) -> a
    void execute() -> a
sheepwar.StateNextLevel -> sheepwar.n:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int cloudIndex -> s
    int cloud2Index -> t
    int down_cloudIndex -> u
    int down_cloud2Index -> v
    int x1 -> w
    int x2 -> x
    int x3 -> y
    int ballonY -> z
    int ballon2Y -> A
    int ballon3Y -> B
    int ballon4Y -> C
    int ballon5Y -> D
    void processNextLevel(sheepwar.Role) -> a
    void clear() -> a
sheepwar.StateRanking -> sheepwar.o:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int rankingIndex -> s
    int rankY -> t
    void processRanking() -> a
    void clear() -> b
sheepwar.StateShop -> sheepwar.p:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int shopX -> s
    int shopY -> t
    void processShop() -> a
    int getPropIndex(int,int) -> a
    void drawNum(cn.ohyeah.stb.game.SGraphics,int,int,int) -> a
    void clear() -> b
sheepwar.StateSubMenu -> sheepwar.q:
    sheepwar.SheepWarGameEngine engine -> a
    boolean running -> b
    int menuIndex -> s
    int processSubMenu() -> a
    void clear() -> b
sheepwar.Weapon -> sheepwar.r:
    int id -> J
    int status -> a
    int speedX -> b
    int speedY -> s
    int direction -> t
    int frame -> K
    int mapx -> u
    int mapy -> v
    int width -> w
    int height -> x
    int scores -> y
    boolean isUse -> z
    java.util.Vector bombs -> A
    java.util.Vector nets -> B
    java.util.Vector booms -> C
    java.util.Vector protects -> L
    java.util.Vector glares -> D
    java.util.Vector harps -> M
    java.util.Vector fruits -> E
    java.util.Vector gloves -> F
    long netTimeS -> G
    long netTimeE -> H
    int netInterval -> I
    int gloveIndex -> N
    int gloveFlag -> O
    void createBomb(sheepwar.Role,int) -> a
    void showBomb(cn.ohyeah.stb.game.SGraphics) -> a
    void createNet(sheepwar.Role,int) -> b
    void showNet(cn.ohyeah.stb.game.SGraphics) -> b
    void createBoom(sheepwar.Role,int) -> c
    void showBoom$2f353eb3(cn.ohyeah.stb.game.SGraphics) -> c
    void createProtect(sheepwar.Role) -> a
    void showProtect(cn.ohyeah.stb.game.SGraphics,sheepwar.Role) -> a
    void createGlare(sheepwar.Role,int) -> d
    void showGlare(cn.ohyeah.stb.game.SGraphics,sheepwar.Role) -> b
    void createHarp$58f538cc() -> a
    void showHarp(cn.ohyeah.stb.game.SGraphics,sheepwar.Batches) -> a
    void showMagnetEffect(cn.ohyeah.stb.game.SGraphics,sheepwar.Batches) -> b
    void createFruit(sheepwar.Role) -> b
    void showFruit(cn.ohyeah.stb.game.SGraphics) -> d
    void createGloves(sheepwar.Role,int) -> e
    void showGloveCreate(cn.ohyeah.stb.game.SGraphics) -> e
    void showGloves$2f353eb3(cn.ohyeah.stb.game.SGraphics) -> f
    void clearObjects() -> b
